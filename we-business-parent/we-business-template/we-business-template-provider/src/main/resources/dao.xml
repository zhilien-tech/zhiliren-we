<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="
	    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
	    http://code.alibabatech.com/schema/dubbo 
		http://code.alibabatech.com/schema/dubbo/dubbo.xsd"
	    default-lazy-init="true">
       
	<!-- dataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="${jdbc_url}"/>
		<property name="username" value="${jdbc_username}"/>
		<property name="password" value="${jdbc_password}"/>
		
		<!-- 初始化时建立物理连接的个数 -->
		<property name="initialSize" value="5"/>
		
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="5"/>
		
		<!-- 最大连接池数量 -->
		<property name="maxActive" value="20"/>
		
		<!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁 -->
		<property name="minEvictableIdleTimeMillis" value="30000"/>
		
		<!-- 
			Destroy线程会检测连接的间隔时间,
			testWhileIdle的判断依据
		 -->
		<property name="timeBetweenEvictionRunsMillis" value="1801"/>
		
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用 -->
		<property name="validationQuery" value="SELECT '' FROM DUAL"/>
		
		<!-- 
			建议配置为true，不影响性能，并且保证安全性。
			 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，
			 执行validationQuery检测连接是否有效
		 -->
		<property name="testWhileIdle" value="true"/>
		
		<!-- 申请连接时是否执行validationQuery检测 -->
		<property name="testOnBorrow" value="false"/>
		
		<!-- 归还连接时是否执行validationQuery检测 -->
		<property name="testOnReturn" value="false"/>
		
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭 -->
		<property name="poolPreparedStatements" value="false"/>
		
		<!-- 
			属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
			1,监控统计用的filter:stat 
			2,日志用的filter:log4j 
			3,防御sql注入的filter:wall 
		-->
		<property name="filters" value="stat"/>
	</bean>
	
	<bean id="springDaoRunner" class="com.uxuexi.core.db.transaction.SpringDaoRunner"></bean>
	<bean id="nutDao" class="org.nutz.dao.impl.NutDao">
		<property name="runner" ref="springDaoRunner"/>
		<constructor-arg>
			<ref bean="dataSource"/>
		</constructor-arg>
	</bean>
	
	<bean id="dbDao" class="com.uxuexi.core.db.dao.impl.DbDao">
		<constructor-arg>
			<ref bean="nutDao"/>
		</constructor-arg>
	</bean>
	
	<!-- SQL 管理 -->
	<bean id="sqlManager" class="org.nutz.dao.impl.FileSqlManager">
		<constructor-arg>
			<value>sql</value>
		</constructor-arg> 
	</bean>
	
	<!-- 事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 使用注解管理事务 在需要处理事务的方法上添加@Transactional即可,请勿在action处理事务-->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
</beans>